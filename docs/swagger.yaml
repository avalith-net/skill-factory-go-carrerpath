info:
  contact: {}
paths:
  /createPath:
    post:
      consumes:
      - application/json
      description: allows you to create a new path if you are an admin
      parameters:
      - description: Complete the json to create new path
        in: body
        name: body-json
        required: true
        schema:
          type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Path has been created
          schema:
            type: string
        "400":
          description: could not create Path
          schema:
            type: string
        default:
          description: error
          schema:
            type: string
      summary: Create new career path
  /createRelatedUserPath:
    post:
      description: allows you to create a new user's path relation if you are an admin
      parameters:
      - description: PathID
        in: query
        name: pathid
        required: true
        type: string
      - description: UserID
        in: query
        name: userid
        required: true
        type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfuly related to the selected path
          schema:
            type: string
        "400":
          description: couldnÂ´t create user path relation
          schema:
            type: string
        default:
          description: error
          schema:
            type: string
      summary: create the user's path relation
  /getPath:
    get:
      consumes:
      - application/json
      description: get user careerpath
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: success show careerpath
          headers:
            Token:
              description: jwtKey
              type: string
          schema:
            type: string
        "400":
          description: missing id parameter
          schema:
            type: string
        "404":
          description: error occurred looking the path
          schema:
            type: string
        default:
          description: Error show careerpath
          schema:
            type: string
      summary: shows a complete original career path
  /getUserPath:
    get:
      consumes:
      - application/json
      description: get user careerpath
      parameters:
      - description: pathID
        in: query
        name: pathid
        required: true
        type: string
      - description: userID
        in: query
        name: userid
        required: true
        type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: status ok
          schema:
            type: string
        "400":
          description: user not related with given path
          schema:
            type: string
        default:
          description: Error
          schema:
            type: string
      summary: shows a complete user's career path
  /login:
    post:
      consumes:
      - application/json
      description: get the email and password to access
      operationId: login
      parameters:
      - description: Allows to complete the json for login
        in: body
        name: body-json
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success Login
          headers:
            Token:
              description: jwtKey
              type: string
          schema:
            type: string
        "400":
          description: invalid login
          schema:
            type: string
        "404":
          description: invalid login
          schema:
            type: string
        default:
          description: error
          schema:
            type: string
      summary: Enter the system
  /modifyPassword:
    put:
      description: get the user and password update
      parameters:
      - description: Allows to replace the password for login
        in: body
        name: New-password
        required: true
        schema:
          type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Password updated
          schema:
            type: string
        "400":
          description: something went wrong with the given data or couldn't update
            password
          schema:
            type: string
        "404":
          description: something went wrong with the given data or couldn't update
            password
          schema:
            type: string
        default:
          description: Invalid Password Update
          schema:
            type: string
      summary: Modify user password
  /passwordRecovery:
    put:
      description: send email at the person what forgot the password
      parameters:
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Token:
              description: jwtKey
              type: string
          schema:
            type: string
        "400":
          description: invalid email, please write your email or the given email is
            not registered
          schema:
            type: string
        "404":
          description: invalid email, please write your email or the given email is
            not registered
          schema:
            type: string
        default:
          description: error processing password recovery
          schema:
            type: string
      summary: recovery the password if dont remember
  /register:
    post:
      description: ask for email and password for register in the app
      parameters:
      - description: User credentials
        in: formData
        name: name
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: profilePhoto
        in: formData
        name: profilePhoto
        required: true
        type: file
      - description: surname
        in: formData
        name: surname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user successfully registered
          headers:
            Token:
              description: jwtKey
              type: string
          schema:
            type: string
        "400":
          description: something went wrong with the given data, error or the given
            email is already in use
          schema:
            type: string
        "404":
          description: something went wrong with the given data, error or the given
            email is already in use
          schema:
            type: string
        default:
          description: error in register
          schema:
            type: string
      summary: creates the user register in the db
swagger: "2.0"
